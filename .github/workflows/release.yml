name: Build and Release

on:
  push:
    tags:
      - "v*" # 태그가 v로 시작할 때 트리거 (예: v1.0.0)
  workflow_dispatch: # 수동 실행 허용

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macOS-arm64
            arch: arm64
            python-version: "3.11"
            executable-name: "FM-Radio-Enhanced-macOS-arm64"
            file-extension: ""
          - os: windows-latest
            platform: Windows-x64
            arch: x64
            python-version: "3.11"
            executable-name: "FM-Radio-Enhanced-Windows-x64"
            file-extension: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.arch }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PyInstaller
        uses: actions/cache@v3
        with:
          path: |
            build/
            __pycache__/
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          # libusb 설치 (USB 통신을 위해 필요)
          brew install libusb
          # 빌드 툴 설치
          brew install create-dmg || true

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows용 libusb 설치 (vcpkg 사용)
          # choco install libusb 대신 pip으로 설치
          echo "libusb will be handled by Python packages"

      - name: Install Python dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          python -m pip install --upgrade pip setuptools wheel
          echo "Installing requirements from requirements.txt..."
          pip install -r requirements.txt
          echo "Installing PyInstaller..."
          pip install pyinstaller
          echo "Cleaning up unnecessary packages to save memory..."
          pip uninstall -y matplotlib numpy scipy pandas || echo "Some packages were not installed, skipping..."
          echo "✅ Dependencies installed successfully!"
          echo "Installed packages:"
          pip list

      - name: Build executable with PyInstaller (macOS)
        if: runner.os == 'macOS'
        timeout-minutes: 45
        run: |
          echo "🔧 Building macOS executable..."
          echo "Python version: $(python --version)"
          echo "PyInstaller version: $(pyinstaller --version)"
          echo "Working directory: $(pwd)"
          echo "Files in current directory:"
          ls -la

          # 메모리 정보 확인
          echo "Memory info:"
          vm_stat | head -5

          # spec 파일을 사용하여 빌드
          echo "🚀 Starting PyInstaller build..."
          pyinstaller build.spec --clean --noconfirm --log-level INFO

          echo "✅ Build completed. Checking output..."
          # 실행 파일이 정상적으로 생성되었는지 확인
          ls -la dist/

          # macOS에서 app 번들 확인
          if [ -d "dist/FM-Radio-Enhanced-macOS-arm64.app" ]; then
            echo "📱 Found app bundle!"
            ls -la "dist/FM-Radio-Enhanced-macOS-arm64.app"
          else
            echo "⚠️ App bundle not found, checking for executable..."
            ls -la dist/
          fi

          echo "🎯 macOS build finished!"

      - name: Build executable with PyInstaller (Windows)
        if: runner.os == 'Windows'
        timeout-minutes: 45
        run: |
          Write-Host "🔧 Building Windows executable..." -ForegroundColor Green
          Write-Host "Python version: $(python --version)" -ForegroundColor Cyan
          Write-Host "PyInstaller version: $(pyinstaller --version)" -ForegroundColor Cyan
          Write-Host "Working directory: $(Get-Location)" -ForegroundColor Cyan
          Write-Host "Files in current directory:" -ForegroundColor Cyan
          Get-ChildItem

          # 메모리 정보 확인
          Write-Host "Memory info:" -ForegroundColor Cyan
          Get-WmiObject -Class Win32_OperatingSystem | Select-Object TotalVisibleMemorySize, FreePhysicalMemory

          # spec 파일을 사용하여 빌드
          Write-Host "🚀 Starting PyInstaller build..." -ForegroundColor Green
          pyinstaller build.spec --clean --noconfirm --log-level INFO

          Write-Host "✅ Build completed. Checking output..." -ForegroundColor Green
          # 실행 파일이 정상적으로 생성되었는지 확인
          Get-ChildItem dist/

          Write-Host "🎯 Windows build finished!" -ForegroundColor Green

      - name: Create distribution directory
        run: |
          mkdir -p dist-final

      - name: Prepare distribution files (macOS)
        if: runner.os == 'macOS'
        run: |
          # .app 번들이 있는지 확인하고 전체 앱을 패키징
          if [ -d "dist/FM-Radio-Enhanced-macOS-arm64.app" ]; then
            echo "📱 Packaging .app bundle..."
            # .app 번들 전체를 dist-final로 복사
            cp -r "dist/FM-Radio-Enhanced-macOS-arm64.app" "dist-final/"
            
            # README와 라이선스 파일 추가
            cp README.md dist-final/ || echo "README.md not found, skipping"
            cp LICENSE dist-final/ || echo "LICENSE not found, skipping"
            
            # .app 번들을 포함한 압축 파일 생성
            cd dist-final
            tar -czf "../${{ matrix.executable-name }}.tar.gz" *
            cd ..
            
            echo "✅ Created .app bundle package: ${{ matrix.executable-name }}.tar.gz"
          else
            echo "⚠️ .app bundle not found, packaging executable..."
            # 실행 파일이 있으면 그것을 패키징
            if [ -f "dist/${{ matrix.executable-name }}" ]; then
              cp "dist/${{ matrix.executable-name }}" "dist-final/"
              chmod +x "dist-final/${{ matrix.executable-name }}"
            fi
            
            # README와 라이선스 파일 추가
            cp README.md dist-final/ || echo "README.md not found, skipping"
            cp LICENSE dist-final/ || echo "LICENSE not found, skipping"
            
            # 압축 파일 생성
            cd dist-final
            tar -czf "../${{ matrix.executable-name }}.tar.gz" *
            cd ..
          fi

      - name: Prepare distribution files (Windows)
        if: runner.os == 'Windows'
        run: |
          # 실행 파일을 dist-final로 복사
          Copy-Item "dist\${{ matrix.executable-name }}${{ matrix.file-extension }}" "dist-final\"

          # README와 라이선스 파일 추가
          if (Test-Path "README.md") { Copy-Item "README.md" "dist-final\" }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "dist-final\" }

          # ZIP 파일 생성
          Compress-Archive -Path "dist-final\*" -DestinationPath "${{ matrix.executable-name }}.zip"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.executable-name }}
          path: |
            ${{ matrix.executable-name }}.tar.gz
            ${{ matrix.executable-name }}.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: FM Radio Enhanced ${{ github.ref_name }}
          generate_release_notes: true
          body: |
            ## 📻 FM Radio Enhanced ${{ github.ref_name }}

            ### 📥 Download
            - **🍎 macOS (ARM64)**: Download `FM-Radio-Enhanced-macOS-arm64.tar.gz`
            - **🪟 Windows (x64)**: Download `FM-Radio-Enhanced-Windows-x64.zip`

            ### 🚀 Installation

            #### macOS
            1. Download the `.tar.gz` file
            2. Extract: `tar -xzf FM-Radio-Enhanced-macOS-arm64.tar.gz`
            3. Run: `./FM-Radio-Enhanced-macOS-arm64`

            #### Windows
            1. Download the `.zip` file
            2. Extract the ZIP file
            3. Run: `FM-Radio-Enhanced-Windows-x64.exe`

            ### 💻 System Requirements
            - **macOS**: macOS 11.0+ (Big Sur) with Apple Silicon (M1/M2)
            - **Windows**: Windows 10/11 (64-bit)
            - Compatible Samsung Galaxy device with FM radio capability
            - USB connection

            ### 📱 Supported Devices
            - Samsung Galaxy devices with Product IDs: 0xa054, 0xa059, 0xa05b

            ### ✨ Features
            - FM Radio control and tuning
            - RDS (Radio Data System) support
            - Station presets and scanning
            - Signal strength monitoring
            - Volume and mute controls
            - Recording functionality
            - Modern, intuitive GUI

            ---
            **⚠️ Note**: This application requires a compatible Samsung Galaxy device connected via USB.

            ## 📝 Changelog
          files: |
            artifacts/FM-Radio-Enhanced-macOS-arm64/FM-Radio-Enhanced-macOS-arm64.tar.gz
            artifacts/FM-Radio-Enhanced-Windows-x64/FM-Radio-Enhanced-Windows-x64.zip
          draft: false
          prerelease: false
